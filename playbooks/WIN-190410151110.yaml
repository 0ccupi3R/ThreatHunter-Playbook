title: Basic PowerShell Execution
id: WIN-190410151110
author: Roberto Rodriguez @Cyb3rWard0g
playbook_link:
creation_date: 2019/04/10
platform: Windows
permissions_required:
  - User
attack_coverage:
  - technique: T1086
    tactics:
      - TA0002
hypothesis: Adversaries might be leveraging PowerShell to execute code within my environment
description: |-
  Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code.
  Therefore, it is important to understand the basic artifacts left when PowerShell is used in your environment.
validation_dataset:
  - type: mordor
    url: https://raw.githubusercontent.com/hunters-forge/mordor/master/datasets/small/windows/execution/empire_launcher_vbs.tar.gz
analytics:
  - name: Analytic I
    data_sources:
      - Microsoft-Windows-PowerShell/Operational
      - PowerShell
    false_positives: Medium
    description: Within the classic PowerShell log, event ID 400 indicates when a new PowerShell host process has started. You can filter on powershell.exe as a host application if you want to or leave it without a filter to captuer every single PowerShell host
    logic: |-
      SELECT `@timestamp`, computer_name, channel
      FROM mordorTable
      WHERE (channel = "Microsoft-Windows-PowerShell/Operational" OR channel = "Windows PowerShell")
          AND (event_id = 400 OR event_id = 4103)
  - name: Analytic II
    data_sources:
      - Security
    false_positives: High
    description: Looking for non-interactive powershell session might be a sign of PowerShell being executed by another application in the background
    logic: |-
      SELECT `@timestamp`, computer_name, NewProcessName, ParentProcessName
      FROM mordorTable
      WHERE channel = "Security"
          AND event_id = 4688
          AND NewProcessName LIKE "%powershell.exe"
          AND NOT ParentProcessName LIKE "%explorer.exe"
  - name: Analytic III
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
    false_positives: High
    description: Looking for non-interactive powershell session might be a sign of PowerShell being executed by another application in the background
    logic: |-
      SELECT `@timestamp`, computer_name, Image, ParentImage
      FROM mordorTable
      WHERE channel = "Microsoft-Windows-Sysmon/Operational"
          AND event_id = 1
          AND Image LIKE "%powershell.exe"
          AND NOT ParentImage LIKE "%explorer.exe"
  - name: Analytic IV
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
    false_positives: Medium
    description: Monitor for processes loading PowerShell DLL *system.management.automation*
    logic: |-
      SELECT `@timestamp`, computer_name, Image, ImageLoaded
      FROM mordorTable
      WHERE channel = "Microsoft-Windows-Sysmon/Operational"
          AND event_id = 7
          AND (lower(Description) = "system.management.automation" OR lower(ImageLoaded) LIKE "%system.management.automation%")
  - name: Analytic V
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
    false_positives: Medium
    description: Monitoring for PSHost* pipes is another interesting way to find PowerShell execution
    logic: |-
      SELECT `@timestamp`, computer_name, Image, PipeName
      FROM mordorTable
      WHERE channel = "Microsoft-Windows-Sysmon/Operational"
          AND event_id = 17
          AND lower(PipeName) LIKE "\\\\pshost%"
  - name: Analytic VI
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
    false_positives: Medium
    description: The “PowerShell Named Pipe IPC” event will indicate the name of the PowerShell AppDomain that started. Sign of PowerShell execution
    logic: |-
      SELECT `@timestamp`, computer_name, message
      FROM mordorTable
      WHERE channel = "Microsoft-Windows-PowerShell/Operational"
          AND event_id = 53504
detection_blindspots:
hunter_notes: |-
  * Explore the data produced in your environment with the analytics above and document what normal looks like from a PowerShell perspective.
  * If execution of PowerShell happens all the time in your environment, I suggest to categorize the data you collect by business unit to build profiles and be able to filter out potential noise.
  * You can also stack the values of the command line arguments being used. You can hash the command line arguments too and stack the values.
hunt_output:
  - category: signature
    type: SIGMA
    name: sysmon_powershell_execution_moduleload
    url: https://github.com/hunters-forge/ThreatHunter-Playbook/tree/master/signatures/sigma/sysmon_powershell_execution_moduleload.yml
  - category: signature
    type: SIGMA
    name: sysmon_powershell_execution_pipe
    url: https://github.com/hunters-forge/ThreatHunter-Playbook/tree/master/signatures/sigma/sysmon_powershell_execution_pipe.yml
  - category: signature
    type: SIGMA
    name: sysmon_non_interactive_powershell_execution
    url: https://github.com/hunters-forge/ThreatHunter-Playbook/tree/master/signatures/sigma/sysmon_non_interactive_powershell_execution.yml
  - category: signature
    type: SIGMA
    name: win_non_interactive_powershell
    url: https://github.com/hunters-forge/ThreatHunter-Playbook/tree/master/signatures/sigma/win_non_interactive_powershell.yml
references: |-
  * https://github.com/darkoperator/Presentations/blob/master/PSConfEU%202019%20Tracking%20PowerShell%20Usage.pdf
  * https://posts.specterops.io/abusing-powershell-desired-state-configuration-for-lateral-movement-ca42ddbe6f06