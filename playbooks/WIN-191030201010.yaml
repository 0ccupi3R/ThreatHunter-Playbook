title: Remote Interactive Task Manager LSASS Dump
id: WIN-191030201010
author: Roberto Rodriguez @Cyb3rWard0g
playbook_link: WIN-1904101010
creation_date: 2019/10/30
platform: Windows
permissions_required:
  - Administrator
attack_coverage:
  - technique: T1003
    tactics:
      - TA0006
hypothesis: Adversaries might be RDPing to computers in my environment and interactively dumping the memory contents of LSASS with task manager.
description: |-
  The Windows Task Manager may be used to dump the memory space of lsass.exe to disk for processing with a credential access tool such as Mimikatz.
  This is performed by launching Task Manager as a privileged user, selecting lsass.exe, and clicking “Create dump file”.
  This saves a dump file to disk with a deterministic name that includes the name of the process being dumped.
validation_dataset:
  - type: mordor
    url: https://raw.githubusercontent.com/hunters-forge/mordor/master/datasets/small/windows/credential_access/remoteinteractive_taskmngr_lsass_dump.tar.gz
  - type: mordor
    url: https://raw.githubusercontent.com/hunters-forge/mordor/master/datasets/small/windows/credential_access/interactive_taskmngr_lsass_dump.tar.gz
analytics:
  - name: Analytic I
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
    false_positives: Medium
    description: Look for taskmgr creating files which name contains the string lsass and with extension .dmp.
    logic: |-
      SELECT `@timestamp`, computer_name, Image, TargetFilename, ProcessGuid
      FROM mordorTable
      WHERE channel = "Microsoft-Windows-Sysmon/Operational"
          AND event_id = 11
          AND Image LIKE "%taskmgr.exe"
          AND lower(TargetFilename) RLIKE ".*lsass.*\.dmp"
  - name: Analytic II
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
    false_positives: Medium
    description: Look for task manager access lsass and with functions from dbgcore.dll or dbghelp.dll libraries
    logic: |-
      SELECT `@timestamp`, computer_name, SourceImage, TargetImage, GrantedAccess
      FROM mordorTable
      WHERE channel = "Microsoft-Windows-Sysmon/Operational"
          AND event_id = 10
          AND lower(SourceImage) LIKE "%taskmgr.exe"
          AND lower(TargetImage) LIKE "%lsass.exe"
          AND (lower(CallTrace) RLIKE ".*dbgcore\.dll.*" OR lower(CallTrace) RLIKE ".*dbghelp\.dll.*")
  - name: Analytic III
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
    false_positives: Medium
    description: Look for any process accessing lsass and with functions from dbgcore.dll or dbghelp.dll libraries
    logic: |-
      SELECT `@timestamp`, computer_name, SourceImage, TargetImage, GrantedAccess
      FROM mordorTable
      WHERE channel = "Microsoft-Windows-Sysmon/Operational"
          AND event_id = 10
          AND lower(TargetImage) LIKE "%lsass.exe"
          AND (lower(CallTrace) RLIKE ".*dbgcore\.dll.*" OR lower(CallTrace) RLIKE ".*dbghelp\.dll.*")
  - name: Analytic IV
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
    false_positives: Low
    description: Look for combinations of process access and process creation to get more context around potential lsass dump form task manager or other binaries
    logic: |-
      SELECT o.`@timestamp`, o.computer_name, o.Image, o.LogonId, o.ProcessGuid, a.SourceProcessGUID, o.CommandLine
      FROM mordorTable o
      INNER JOIN (
          SELECT computer_name,SourceProcessGUID
          FROM mordorTable
          WHERE channel = "Microsoft-Windows-Sysmon/Operational"
              AND event_id = 10
              AND lower(TargetImage) LIKE "%lsass.exe"
              AND (lower(CallTrace) RLIKE ".*dbgcore\.dll.*" OR lower(CallTrace) RLIKE ".*dbghelp\.dll.*")
          ) a
      ON o.ProcessGuid = a.SourceProcessGUID
      WHERE o.channel = "Microsoft-Windows-Sysmon/Operational"
          AND o.event_id = 1
  - name: Analytic V
    data_sources:
      - Microsoft-Windows-Sysmon/Operational
      - Security
    false_positives: Low
    description: Look for binaries accessing lsass that are running under the same logon context of a user over an RDP session
    logic: |-
      SELECT o.`@timestamp`, o.computer_name, o.SessionName, o.AccountName, o.ClientName, o.ClientAddress, a.Image, a.CommandLine
      FROM mordorTable o
      INNER JOIN (
          SELECT LogonId, Image, CommandLine
          FROM (
              SELECT o.Image, o.LogonId, o.CommandLine
              FROM mordorTable o
              INNER JOIN (
                  SELECT computer_name,SourceProcessGUID
                  FROM mordorTable
                  WHERE channel = "Microsoft-Windows-Sysmon/Operational"
                      AND event_id = 10
                      AND lower(TargetImage) LIKE "%lsass.exe"
                      AND (lower(CallTrace) RLIKE ".*dbgcore\.dll.*" OR lower(CallTrace) RLIKE ".*dbghelp\.dll.*")
                  ) a
              ON o.ProcessGuid = a.SourceProcessGUID
              WHERE o.channel = "Microsoft-Windows-Sysmon/Operational"
                  AND o.event_id = 1
              )
          ) a
      ON o.LogonID = a.LogonId
      WHERE lower(o.channel) = "security"
          AND o.event_id = 4778
detection_blindspots:
hunter_notes: |-
  * Add context to your queries by joining RDP remote interactive authentication events by the logon ID.
hunt_output:
references: |-
  * https://car.mitre.org/analytics/CAR-2019-08-001/